{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] File b'./data/NAB/realKnownCause/nyc_taxi.csv' does not exist: b'./data/NAB/realKnownCause/nyc_taxi.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-62-1fcc0946ca36>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpreprocessing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'./data/NAB/realKnownCause/nyc_taxi.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    700\u001b[0m                     skip_blank_lines=skip_blank_lines)\n\u001b[1;32m    701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    703\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    427\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    428\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 429\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1120\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1121\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1122\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1123\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1124\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'python'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1851\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'usecols'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1853\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1854\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1855\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'./data/NAB/realKnownCause/nyc_taxi.csv' does not exist: b'./data/NAB/realKnownCause/nyc_taxi.csv'"
     ]
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn import preprocessing\n",
    "\n",
    "df = pd.read_csv('./data/NAB/realKnownCause/nyc_taxi.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    2014-07-01 00:00:00\n",
      "1    2014-07-01 00:30:00\n",
      "2    2014-07-01 01:00:00\n",
      "3    2014-07-01 01:30:00\n",
      "4    2014-07-01 02:00:00\n",
      "5    2014-07-01 02:30:00\n",
      "6    2014-07-01 03:00:00\n",
      "7    2014-07-01 03:30:00\n",
      "8    2014-07-01 04:00:00\n",
      "9    2014-07-01 04:30:00\n",
      "Name: timestamp, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df['timestamp'].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15137.569379844961\n"
     ]
    }
   ],
   "source": [
    "print(df['value'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['timestamp'] = pd.to_datetime(df['timestamp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0   2014-07-01 00:00:00\n",
      "1   2014-07-01 00:30:00\n",
      "2   2014-07-01 01:00:00\n",
      "3   2014-07-01 01:30:00\n",
      "4   2014-07-01 02:00:00\n",
      "5   2014-07-01 02:30:00\n",
      "6   2014-07-01 03:00:00\n",
      "7   2014-07-01 03:30:00\n",
      "8   2014-07-01 04:00:00\n",
      "9   2014-07-01 04:30:00\n",
      "Name: timestamp, dtype: datetime64[ns]\n"
     ]
    }
   ],
   "source": [
    "print(df['timestamp'].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f5cf05b74a8>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot(x='timestamp', y='value')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_n = df[['value']]\n",
    "min_max_scaler = preprocessing.StandardScaler()\n",
    "np_scaled = min_max_scaler.fit_transform(data_n)\n",
    "data_n = pd.DataFrame(np_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# important parameters and train/test size\n",
    "prediction_time = 1 \n",
    "testdatasize = 2000\n",
    "unroll_length = 50\n",
    "testdatacut = testdatasize + unroll_length  + 1\n",
    "\n",
    "#train data\n",
    "x_train = data_n[0:-prediction_time-testdatacut].values\n",
    "y_train = data_n[prediction_time:-testdatacut  ][0].values\n",
    "\n",
    "# test data\n",
    "x_test = data_n[0-testdatacut:-prediction_time].values\n",
    "y_test = data_n[prediction_time-testdatacut:  ][0].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train (8218, 50, 1)\n",
      "y_train (8218,)\n",
      "x_test (2000, 50, 1)\n",
      "y_test (2000,)\n"
     ]
    }
   ],
   "source": [
    "#unroll: create sequence of 50 previous data points for each data points\n",
    "def unroll(data,sequence_length=24):\n",
    "    result = []\n",
    "    for index in range(len(data) - sequence_length):\n",
    "        result.append(data[index: index + sequence_length])\n",
    "    return np.asarray(result)\n",
    "\n",
    "# adapt the datasets for the sequence data shape\n",
    "x_train = unroll(x_train,unroll_length)\n",
    "x_test  = unroll(x_test,unroll_length)\n",
    "y_train = y_train[-x_train.shape[0]:]\n",
    "y_test  = y_test[-x_test.shape[0]:]\n",
    "\n",
    "# see the shape\n",
    "print(\"x_train\", x_train.shape)\n",
    "print(\"y_train\", y_train.shape)\n",
    "print(\"x_test\", x_test.shape)\n",
    "print(\"y_test\", y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "# specific libraries for RNN\n",
    "# keras is a high layer build on Tensorflow layer to stay in high level/easy implementation\n",
    "from keras.layers.core import Dense, Activation, Dropout\n",
    "from keras.layers.recurrent import LSTM\n",
    "from keras.models import Sequential\n",
    "#import lstm, time #helper libraries\n",
    "from keras.models import model_from_json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jzhang/venv_py36vc/lib/python3.6/site-packages/ipykernel_launcher.py:7: UserWarning: The `input_dim` and `input_length` arguments in recurrent layers are deprecated. Use `input_shape` instead.\n",
      "  import sys\n",
      "/home/jzhang/venv_py36vc/lib/python3.6/site-packages/ipykernel_launcher.py:7: UserWarning: Update your `LSTM` call to the Keras 2 API: `LSTM(return_sequences=True, input_shape=(None, 1), units=50)`\n",
      "  import sys\n",
      "/home/jzhang/venv_py36vc/lib/python3.6/site-packages/ipykernel_launcher.py:16: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(units=1)`\n",
      "  app.launch_new_instance()\n"
     ]
    }
   ],
   "source": [
    "# Build the model\n",
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(\n",
    "    input_dim=x_train.shape[-1],\n",
    "    output_dim=50,\n",
    "    return_sequences=True))\n",
    "model.add(Dropout(0.4))\n",
    "\n",
    "model.add(LSTM(\n",
    "    100,\n",
    "    return_sequences=False))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Dense(\n",
    "    output_dim=1))\n",
    "model.add(Activation('linear'))\n",
    "\n",
    "model.compile(loss='mse', optimizer='rmsprop')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jzhang/venv_py36vc/lib/python3.6/site-packages/ipykernel_launcher.py:6: UserWarning: The `nb_epoch` argument in `fit` has been renamed `epochs`.\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 6574 samples, validate on 1644 samples\n",
      "Epoch 1/50\n",
      "6574/6574 [==============================] - 6s 839us/step - loss: 0.3599 - val_loss: 0.2318\n",
      "Epoch 2/50\n",
      "6574/6574 [==============================] - 4s 633us/step - loss: 0.1812 - val_loss: 0.1651\n",
      "Epoch 3/50\n",
      "6574/6574 [==============================] - 4s 663us/step - loss: 0.1537 - val_loss: 0.1380\n",
      "Epoch 4/50\n",
      "6574/6574 [==============================] - 4s 661us/step - loss: 0.1362 - val_loss: 0.1439\n",
      "Epoch 5/50\n",
      "6574/6574 [==============================] - 4s 615us/step - loss: 0.1270 - val_loss: 0.1193\n",
      "Epoch 6/50\n",
      "6574/6574 [==============================] - 4s 601us/step - loss: 0.1209 - val_loss: 0.1296\n",
      "Epoch 7/50\n",
      "6574/6574 [==============================] - 4s 617us/step - loss: 0.1140 - val_loss: 0.0993\n",
      "Epoch 8/50\n",
      "6574/6574 [==============================] - 4s 620us/step - loss: 0.1084 - val_loss: 0.1202\n",
      "Epoch 9/50\n",
      "6528/6574 [============================>.] - ETA: 0s - loss: 0.1039"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-59282a005197>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mnb_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     validation_split=0.2)\n\u001b[0m",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\u001b[0m\n\u001b[1;32m   1037\u001b[0m                                         \u001b[0minitial_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitial_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1038\u001b[0m                                         \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1039\u001b[0;31m                                         validation_steps=validation_steps)\n\u001b[0m\u001b[1;32m   1040\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1041\u001b[0m     def evaluate(self, x=None, y=None,\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mfit_loop\u001b[0;34m(model, f, ins, out_labels, batch_size, epochs, verbose, callbacks, val_f, val_ins, shuffle, callback_metrics, initial_epoch, steps_per_epoch, validation_steps)\u001b[0m\n\u001b[1;32m    210\u001b[0m                         val_outs = test_loop(model, val_f, val_ins,\n\u001b[1;32m    211\u001b[0m                                              \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 212\u001b[0;31m                                              verbose=0)\n\u001b[0m\u001b[1;32m    213\u001b[0m                         \u001b[0mval_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_outs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    214\u001b[0m                         \u001b[0;31m# Same labels assumed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mtest_loop\u001b[0;34m(model, f, ins, batch_size, verbose, steps)\u001b[0m\n\u001b[1;32m    390\u001b[0m                 \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 392\u001b[0;31m             \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    393\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    394\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mbatch_index\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2713\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_legacy_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2714\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2715\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2716\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2717\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mpy_any\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mis_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2673\u001b[0m             \u001b[0mfetched\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_callable_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0marray_vals\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_metadata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2674\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2675\u001b[0;31m             \u001b[0mfetched\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_callable_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0marray_vals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2676\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2677\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/venv_py36vc/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1437\u001b[0m           ret = tf_session.TF_SessionRunCallable(\n\u001b[1;32m   1438\u001b[0m               \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1439\u001b[0;31m               run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1440\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "model.fit(\n",
    "    x_train,\n",
    "    y_train,\n",
    "    batch_size=128,\n",
    "    nb_epoch=50,\n",
    "    validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the list of difference between prediction and test data\n",
    "diff=[]\n",
    "ratio=[]\n",
    "p = model.predict(x_test)\n",
    "# predictions = lstm.predict_sequences_multiple(loaded_model, x_test, 50, 50)\n",
    "for u in range(len(y_test)):\n",
    "    pr = p[u][0]\n",
    "    ratio.append((y_test[u]/pr)-1)\n",
    "    diff.append(abs(y_test[u]- pr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the prediction and the reality (for the test data)\n",
    "fig, axs = plt.subplots()\n",
    "axs.plot(p,color='red', label='prediction')\n",
    "axs.plot(y_test,color='blue', label='y_test')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    10280\n",
      "1       40\n",
      "Name: anomaly, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# An estimation of anomly population of the dataset (necessary for several algorithm)\n",
    "outliers_fraction = 0.02\n",
    "# select the most distant prediction/reality data points as anomalies\n",
    "diff = pd.Series(diff)\n",
    "number_of_outliers = int(outliers_fraction*len(diff))\n",
    "threshold = diff.nlargest(number_of_outliers).min()\n",
    "# data with anomaly label (test data part)\n",
    "test = (diff >= threshold).astype(int)\n",
    "# the training data part where we didn't predict anything (overfitting possible): no anomaly\n",
    "complement = pd.Series(0, index=np.arange(len(data_n)-testdatasize))\n",
    "# # add the data to the main\n",
    "df['anomaly'] = complement.append(test, ignore_index='True')\n",
    "print(df['anomaly'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()\n",
    "a = df.loc[df['anomaly'] == 1, ['timestamp', 'value']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(df['timestamp'].iloc[-testdatasize:], df['value'].iloc[-testdatasize:], color='blue')\n",
    "ax.scatter(a['timestamp'],a['value'], color='red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8346    2014-12-21 21:00:00\n",
       "8349    2014-12-21 22:30:00\n",
       "8350    2014-12-21 23:00:00\n",
       "8487    2014-12-24 19:30:00\n",
       "8488    2014-12-24 20:00:00\n",
       "8489    2014-12-24 20:30:00\n",
       "8510    2014-12-25 07:00:00\n",
       "8511    2014-12-25 07:30:00\n",
       "8512    2014-12-25 08:00:00\n",
       "8513    2014-12-25 08:30:00\n",
       "8514    2014-12-25 09:00:00\n",
       "8515    2014-12-25 09:30:00\n",
       "8516    2014-12-25 10:00:00\n",
       "8685    2014-12-28 22:30:00\n",
       "8686    2014-12-28 23:00:00\n",
       "8704    2014-12-29 08:00:00\n",
       "8831    2014-12-31 23:30:00\n",
       "8833    2015-01-01 00:30:00\n",
       "8834    2015-01-01 01:00:00\n",
       "8835    2015-01-01 01:30:00\n",
       "8836    2015-01-01 02:00:00\n",
       "8876    2015-01-01 22:00:00\n",
       "8877    2015-01-01 22:30:00\n",
       "8878    2015-01-01 23:00:00\n",
       "8879    2015-01-01 23:30:00\n",
       "8880    2015-01-02 00:00:00\n",
       "8881    2015-01-02 00:30:00\n",
       "8882    2015-01-02 01:00:00\n",
       "8896    2015-01-02 08:00:00\n",
       "8925    2015-01-02 22:30:00\n",
       "                ...        \n",
       "10082   2015-01-27 01:00:00\n",
       "10083   2015-01-27 01:30:00\n",
       "10084   2015-01-27 02:00:00\n",
       "10085   2015-01-27 02:30:00\n",
       "10086   2015-01-27 03:00:00\n",
       "10087   2015-01-27 03:30:00\n",
       "10088   2015-01-27 04:00:00\n",
       "10089   2015-01-27 04:30:00\n",
       "10090   2015-01-27 05:00:00\n",
       "10091   2015-01-27 05:30:00\n",
       "10092   2015-01-27 06:00:00\n",
       "10093   2015-01-27 06:30:00\n",
       "10094   2015-01-27 07:00:00\n",
       "10095   2015-01-27 07:30:00\n",
       "10096   2015-01-27 08:00:00\n",
       "10097   2015-01-27 08:30:00\n",
       "10098   2015-01-27 09:00:00\n",
       "10099   2015-01-27 09:30:00\n",
       "10100   2015-01-27 10:00:00\n",
       "10101   2015-01-27 10:30:00\n",
       "10102   2015-01-27 11:00:00\n",
       "10128   2015-01-28 00:00:00\n",
       "10129   2015-01-28 00:30:00\n",
       "10130   2015-01-28 01:00:00\n",
       "10143   2015-01-28 07:30:00\n",
       "10144   2015-01-28 08:00:00\n",
       "10163   2015-01-28 17:30:00\n",
       "10164   2015-01-28 18:00:00\n",
       "10165   2015-01-28 18:30:00\n",
       "10166   2015-01-28 19:00:00\n",
       "Name: timestamp, Length: 100, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a['timestamp']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
